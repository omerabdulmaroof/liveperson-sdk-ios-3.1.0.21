// Generated by Apple Swift version 4.0.3 (swiftlang-900.0.74.1 clang-900.0.39.2)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_attribute(external_source_symbol)
# define SWIFT_STRINGIFY(str) #str
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name) _Pragma(SWIFT_STRINGIFY(clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in=module_name, generated_declaration))), apply_to=any(function, enum, objc_interface, objc_category, objc_protocol))))
# define SWIFT_MODULE_NAMESPACE_POP _Pragma("clang attribute pop")
#else
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name)
# define SWIFT_MODULE_NAMESPACE_POP
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import UIKit;
@import LPMessagingSDK;
@import Foundation;
@import LPInfra;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

SWIFT_MODULE_NAMESPACE_PUSH("SampleApp_Swift")
@class UIWindow;
@class UIApplication;

SWIFT_CLASS("_TtC15SampleApp_Swift11AppDelegate")
@interface AppDelegate : UIResponder <LPMessagingSDKNotificationDelegate, UIApplicationDelegate>
@property (nonatomic, strong) UIWindow * _Nullable window;
- (BOOL)application:(UIApplication * _Nonnull)application didFinishLaunchingWithOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions SWIFT_WARN_UNUSED_RESULT;
- (void)applicationWillResignActive:(UIApplication * _Nonnull)application;
- (void)applicationDidEnterBackground:(UIApplication * _Nonnull)application;
- (void)applicationWillEnterForeground:(UIApplication * _Nonnull)application;
- (void)applicationDidBecomeActive:(UIApplication * _Nonnull)application;
- (void)applicationWillTerminate:(UIApplication * _Nonnull)application;
- (void)application:(UIApplication * _Nonnull)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData * _Nonnull)deviceToken;
- (void)application:(UIApplication * _Nonnull)application didReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo fetchCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSBundle;
@class NSCoder;

SWIFT_CLASS("_TtC15SampleApp_Swift26ConversationViewController")
@interface ConversationViewController : UIViewController
- (IBAction)backButtonPressed;
- (void)viewDidLoad;
- (IBAction)menuButtonPressed;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC15SampleApp_Swift18MainViewController")
@interface MainViewController : UIViewController
- (void)viewDidLoad;
- (IBAction)messagingClicked:(id _Nonnull)sender;
- (IBAction)monitoringClicked:(id _Nonnull)sender;
- (IBAction)getUnreadMessagesClicked:(id _Nonnull)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UITextField;
@class UISwitch;
@class NSError;
@class LPUser;

SWIFT_CLASS("_TtC15SampleApp_Swift23MessagingViewController")
@interface MessagingViewController : UIViewController <LPMessagingSDKdelegate>
@property (nonatomic, strong) IBOutlet UITextField * _Null_unspecified accountTextField;
@property (nonatomic, strong) IBOutlet UITextField * _Null_unspecified firstNameTextField;
@property (nonatomic, strong) IBOutlet UITextField * _Null_unspecified lastNameTextField;
@property (nonatomic, strong) IBOutlet UISwitch * _Null_unspecified windowSwitch;
@property (nonatomic, strong) IBOutlet UISwitch * _Null_unspecified authenticationSwitch;
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
/// Init Monitoring and Messaging SDKs
- (IBAction)initSDKsClicked:(id _Nonnull)sender SWIFT_METHOD_FAMILY(none);
/// This method shows the conversation screen. It considers different modes:
/// Window Mode:
/// <ul>
///   <li>
///     Window           - Shows the conversation screen in a new window created by the SDK. Navigation bar is included.
///   </li>
///   <li>
///     View controller  - Shows the conversation screen in a view controller of your choice.
///   </li>
/// </ul>
/// Authentication Mode:
/// <ul>
///   <li>
///     Authenticated    - Conversation history is saved and shown.
///   </li>
///   <li>
///     Unauthenticated  - Conversation starts clean every time.
///   </li>
/// </ul>
- (IBAction)showConversation;
- (IBAction)sendSDEs:(id _Nonnull)sender;
- (IBAction)windowSwitchChanged:(UISwitch * _Nonnull)sender;
- (IBAction)authenticationSwitchChanged:(UISwitch * _Nonnull)sender;
/// This delegate method is required.
/// It is called when authentication process fails
- (void)LPMessagingSDKAuthenticationFailed:(NSError * _Nonnull)error;
/// This delegate method is required.
/// It is called when the SDK version you’re using is obselete and needs an update.
- (void)LPMessagingSDKObseleteVersion:(NSError * _Nonnull)error;
/// This delegate method is optional.
/// It is called each time the SDK receives info about the agent on the other side.
/// Example:
/// You can use this data to show the agent details on your navigation bar (in view controller mode)
- (void)LPMessagingSDKAgentDetails:(LPUser * _Nullable)agent;
/// This delegate method is optional.
/// It is called each time the SDK menu is opened/closed.
- (void)LPMessagingSDKActionsMenuToggled:(BOOL)toggled;
/// This delegate method is optional.
/// It is called each time the agent typing state changes.
- (void)LPMessagingSDKAgentIsTypingStateChanged:(BOOL)isTyping;
/// This delegate method is optional.
/// It is called after the customer satisfaction page is submitted with a score.
- (void)LPMessagingSDKCSATScoreSubmissionDidFinish:(NSString * _Nonnull)accountID rating:(NSInteger)rating;
/// This delegate method is optional.
/// If you set a custom button, this method will be called when the custom button is clicked.
- (void)LPMessagingSDKCustomButtonTapped;
/// This delegate method is optional.
/// It is called when the SDK has connections issues.
- (void)LPMessagingSDKHasConnectionError:(NSString * _Nullable)error;
/// This delegate method is required.
/// It is called when the token which used for authentication is expired
- (void)LPMessagingSDKTokenExpired:(NSString * _Nonnull)brandID;
/// This delegate method is required.
/// It lets you know if there is an error with the sdk and what this error is
- (void)LPMessagingSDKError:(NSError * _Nonnull)error;
/// This delegate method is optional.
/// It is called when the conversation view controller removed from its container view controller or window.
- (void)LPMessagingSDKConversationViewControllerDidDismiss;
/// This delegate method is optional.
/// It is called when a new conversation has started, from the agent or from the consumer side.
- (void)LPMessagingSDKConversationStarted:(NSString * _Nullable)conversationID;
/// This delegate method is optional.
/// It is called when a conversation has ended, from the agent or from the consumer side.
- (void)LPMessagingSDKConversationEnded:(NSString * _Nullable)conversationID;
/// This delegate method is optional.
/// It is called when the customer satisfaction survey is dismissed after the user has submitted the survey/
- (void)LPMessagingSDKConversationCSATDismissedOnSubmittion:(NSString * _Nullable)conversationID;
/// This delegate method is optional.
/// It is called each time connection state changed for a brand with a flag whenever connection is ready.
/// Ready means that all conversations and messages were synced with the server.
- (void)LPMessagingSDKConnectionStateChanged:(BOOL)isReady brandID:(NSString * _Nonnull)brandID;
/// This delegate method is optional.
/// It is called when the user tapped on the agent’s avatar in the conversation and also in the navigation bar within window mode.
- (void)LPMessagingSDKAgentAvatarTapped:(LPUser * _Nullable)agent;
/// This delegate method is optional.
/// It is called when the Conversation CSAT did load
- (void)LPMessagingSDKConversationCSATDidLoad:(NSString * _Nullable)conversationID;
/// This delegate method is optional.
/// It is called when the Conversation CSAT skipped by the consumer
- (void)LPMessagingSDKConversationCSATSkipped:(NSString * _Nullable)conversationID;
/// This delegate method is optional.
/// It is called when the user is opening photo sharing gallery/camera and the persmissions denied
- (void)LPMessagingSDKUserDeniedPermission:(enum LPPermissionTypes)permissionType;
- (IBAction)resignKeyboard;
- (IBAction)logoutClicked:(id _Nonnull)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC15SampleApp_Swift24MonitoringViewController")
@interface MonitoringViewController : UIViewController
@property (nonatomic, strong) IBOutlet UITextField * _Null_unspecified accountTextField;
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
/// Init Messaging SDK with brandID (account number) and LPMonitoringInitParams (For monitoring)
- (IBAction)initSDKsClicked:(id _Nonnull)sender SWIFT_METHOD_FAMILY(none);
/// Get Engagement clicked selector
/// Send new Get Engagement using LPMonitoringAPI
/// CampaignInfo will be saved in the response in order to be able to use routed conversation in Messaging, using the MessagingSDK
- (IBAction)getEngagementClicked:(id _Nonnull)sender;
/// Send SDE clicked selector
/// Send new SDE using LPMonitoringAPI
/// PageID in the response will be saved for future request for SDE
- (IBAction)sendSDEClicked:(id _Nonnull)sender;
/// Show Conversation clicked selector
/// Show conversation in MessagingSDK will use the saved CampaignInfo, if received, from the Get Engagement Request
- (IBAction)showConversationWithCampaignClicked:(id _Nonnull)sender;
/// Logout clicked selector
/// Logout Monitoring and Messaging SDKs - all the data will be cleared
- (IBAction)logoutClicked:(id _Nonnull)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_MODULE_NAMESPACE_POP
#pragma clang diagnostic pop
